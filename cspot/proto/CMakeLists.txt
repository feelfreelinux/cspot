cmake_minimum_required(VERSION 2.8.12)

project(proto)

# Find dependencies
find_program(GOLANG go DOC "Golang" REQUIRED)
find_program(PROTOC protoc DOC "Protobuf compiler" REQUIRED)

# Helper variables
set(CPPREFL_BIN "protoc-gen-cpprefl")
set(CPPREFL_DIR "cpp-reflection")
set(CPPREFL_PATH ${CMAKE_CURRENT_SOURCE_DIR}/${CPPREFL_DIR})
set(CPPREFL_OUTPUT ${CMAKE_CURRENT_SOURCE_DIR}/${CPPREFL_DIR}/${CPPREFL_BIN})

# Clear SOURCES set by parent projects
set(SOURCES "")

# Find .proto sources
file(GLOB PROTO_SRC "src/*.proto")
# Sources to be CXX compiled
set(PROTO_IMPL "AnyRefImpl.cpp" "ReflectTypeInfo.cpp")
# Other files generated by protoc
set(PROTO_HEADERS "ReflectionInternal.h" "protobuf.h")

# Prepend cwd to the files
foreach(FILE ${PROTO_IMPL})
	list(APPEND SOURCES ${CMAKE_CURRENT_SOURCE_DIR}/protos/${FILE})
	list(APPEND PROTOC_OUTPUTS ${CMAKE_CURRENT_SOURCE_DIR}/protos/${FILE})
endforeach()

foreach(FILE ${PROTO_HEADERS})
	list(APPEND PROTOC_OUTPUTS ${CMAKE_CURRENT_SOURCE_DIR}/protos/${FILE})
endforeach()

# Change *.proto to *.h
foreach(FILE ${PROTO_SRC})
	get_filename_component(FILE ${FILE} NAME_WE)
	list(APPEND PROTOC_OUTPUTS ${CMAKE_CURRENT_SOURCE_DIR}/protos/${FILE}.h)
endforeach()

# Build protoc-gen-cpprefl
add_custom_command(
	OUTPUT ${CPPREFL_OUTPUT}
	COMMAND cd ${CPPREFL_PATH} && go build -o ${CPPREFL_BIN} .
)

# Compile .proto source files to CPP impl
make_directory(${CMAKE_CURRENT_SOURCE_DIR}/protos)
add_custom_command(
	OUTPUT ${PROTOC_OUTPUTS}
	COMMAND cd ${CMAKE_CURRENT_SOURCE_DIR} && protoc --plugin=${CPPREFL_BIN}=${CPPREFL_DIR}/${CPPREFL_BIN} --cpprefl_out protos/ src/*.proto --proto_path src/
	DEPENDS ${PROTO_SRC} ${CPPREFL_OUTPUT}
)

add_library(proto STATIC ${SOURCES})
target_include_directories(proto PUBLIC "protos")
